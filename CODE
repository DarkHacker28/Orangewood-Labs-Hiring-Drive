#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
import time

def move_turtle():
    rospy.init_node('turtle_move_rect', anonymous=True)
    
    pub = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

    move_cmd = Twist()

    rate = rospy.Rate(1)  # 1 Hz

    length = 5.0  # in meters
    breadth = 3.0  # in meters

    move_cmd.linear.x = 1.0  # Move forward at 1 meter per second
    move_cmd.angular.z = 0.0  # No rotation

    def move_forward(distance):
        move_cmd.linear.x = 1.0  # Set forward speed
        move_time = distance / move_cmd.linear.x  # Time = distance / speed
        pub.publish(move_cmd)  # Publish the move command
        time.sleep(move_time)  # Wait for the turtle to move the distance
        move_cmd.linear.x = 0.0  # Stop the turtle
        pub.publish(move_cmd)  # Publish the stop command

    def turn_90_degrees():
        move_cmd.angular.z = 1.0  # Set angular speed
        pub.publish(move_cmd)  # Publish the turn command
        time.sleep(1.5)  # Time to complete 90-degree turn
        move_cmd.angular.z = 0.0  # Stop turning
        pub.publish(move_cmd)  # Publish the stop turn command

    for _ in range(2):
        move_forward(length)  # Move forward along the length
        turn_90_degrees()  # Turn 90 degrees
        move_forward(breadth)  # Move forward along the breadth
        turn_90_degrees()  # Turn 90 degrees

    pub.publish(Twist())  # Send a stop message

if __name__ == '__main__':
    try:
        move_turtle()
    except rospy.ROSInterruptException:
        pass
